{"version":3,"sources":["components/WeatherCard.jsx","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","tempInfo","React","useState","weatherState","setWeatherState","timezone","lon","lat","temp","humidity","pressure","weatherMood","name","speed","country","sunset","useEffect","d","Date","localTime","getTime","localOffset","getTimezoneOffset","nd","toLocaleString","replace","className","App","searchValue","setSearchValue","setTempInfo","getData","a","url","fetch","res","json","data","coord","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a56f0cdf.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nconst WeatherCard = ({tempInfo}) => {\r\n    const [weatherState, setWeatherState] = React.useState(\"\");\r\n    const {\r\n       timezone, lon, lat, temp, humidity, pressure, weatherMood, name, speed, country, sunset\r\n      } = tempInfo;\r\n\r\n    useEffect(() => {\r\n        if(weatherMood){\r\n          switch (weatherMood) {\r\n            case \"Clouds\":\r\n              setWeatherState(\"wi-day-cloudy\");\r\n              break;\r\n            case \"Haze\":\r\n              setWeatherState(\"wi-fog\");\r\n              break;\r\n            case \"Clear\":\r\n              setWeatherState(\"wi-day-sunny\");\r\n              break;\r\n            case \"Mist\":\r\n              setWeatherState(\"wi-dust\");\r\n              break;\r\n            case \"Rain\":\r\n              setWeatherState(\"wi-rain\");\r\n              break;\r\n          \r\n            default:\r\n              setWeatherState(\"wi-day-sunny\");\r\n              break;\r\n          }\r\n        }\r\n    }, [weatherMood])\r\n    //coverting the seconds into time\r\n    let d = new Date();\r\n    let localTime = d.getTime();\r\n    let localOffset = d.getTimezoneOffset() * 60000\r\n    let utc = localTime + localOffset;\r\n    let cityTime = utc + (1000 * timezone);\r\n    let nd = new Date(cityTime).toLocaleString().replace(/:\\d{2}\\s/,' ');;\r\n\r\n    return (\r\n        <>\r\n            <article className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weatherState}`}></i>\r\n        </div>\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span>{temp}&deg;</span>\r\n          </div>\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{weatherMood}</div>\r\n            <div className=\"place\">\r\n              {name}, {country}</div>\r\n          </div>\r\n        </div>\r\n        <div className=\"date\">{nd}</div>\r\n        \r\n        <div className=\"extra-temp\">\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p><i className={\"wi wi-wind wi-towards-ne\"}></i></p>\r\n              <p className=\"extra-info-leftside\">\r\n                Long.:{lon} <br />\r\n                Lat.:{lat}\r\n              </p>\r\n            </div>\r\n            <div className=\"two-sided-section\">\r\n              <p><i className={\"wi wi-humidity\"}></i></p>\r\n              <p className=\"extra-info-leftside\">\r\n                {humidity} <br />\r\n                Humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"weather-extra-info\">\r\n          <div className=\"two-sided-section\">\r\n              <p><i className={\"wi wi-rain\"}></i></p>\r\n              <p className=\"extra-info-leftside\">\r\n                {pressure} <br />\r\n                Pressure\r\n              </p>\r\n            </div>\r\n            <div className=\"two-sided-section\">\r\n              <p><i className={\"wi wi-strong-wind\"}></i></p>\r\n              <p className=\"extra-info-leftside\">\r\n                {speed} <br />\r\n                Speed\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React, { useState, useEffect } from 'react'\nimport './App.css';\nimport WeatherCard from './components/WeatherCard';\nfunction App() {\n  const [searchValue, setSearchValue] = useState(\"New Delhi\");\n  const [tempInfo, setTempInfo] = useState({});\n  const getData = async ()=>{\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=0a4838bbf74b6c7f1e171570a5c1d961`;\n      const res = await fetch(url);\n      const data = await res.json();\n      const{lon, lat} = data.coord;\n      const {timezone} = data;\n      const {temp, humidity, pressure} = data.main;\n      const {main:weatherMood} = data.weather[0];\n      const {name} = data;\n      const {speed} = data.wind;\n      const {country, sunset} = data.sys;\n\n      const weatherInfo ={\n        timezone, lon,lat, temp, humidity, pressure, weatherMood, name, speed, country, sunset\n      }\n      setTempInfo(weatherInfo);\n      // console.log(data);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(() => {\n    getData();\n  }, [])\n\n  return (\n    <>\n      <div className=\"wrap\">\n        <div className=\"search\">\n          <input type=\"search\"\n          placeholder=\"search...\"\n          autoFocus\n          id=\"search\"\n          className=\"searchTerm\"\n          value={searchValue}\n          onChange={(e)=>setSearchValue(e.target.value)}\n          />\n          <button className=\"searchButton\" type=\"button\" onClick={getData}>\n            Search\n          </button>\n        </div>\n      </div>\n\n      <WeatherCard tempInfo={tempInfo}/>\n    </>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}